---- uint16_t Matches (1694 in 147 files) ----
Arm_bitreversal.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):uint16_t fftSize,
Arm_bitreversal.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):uint16_t bitRevFactor,
Arm_bitreversal.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):uint16_t * pBitRevTab)
Arm_bitreversal.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):   uint16_t fftLenBy2, fftLenBy2p1;
Arm_bitreversal.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):   uint16_t i, j;
Arm_bitreversal.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):uint16_t bitRevFactor,
Arm_bitreversal.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):uint16_t * pBitRevTable)
Arm_bitreversal.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):uint16_t bitRevFactor,
Arm_bitreversal.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):uint16_t * pBitRevTab)
Arm_cfft_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    uint16_t fftLen,
Arm_cfft_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    uint16_t twidCoefModifier);
Arm_cfft_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    const uint16_t bitRevLen,
Arm_cfft_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    const uint16_t * pBitRevTable);
Arm_cfft_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    uint16_t * pSrc,
Arm_cfft_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    const uint16_t bitRevLen,
Arm_cfft_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    const uint16_t * pBitRevTable);
Arm_cfft_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):        arm_bitreversal_16((uint16_t*)p1,S->bitRevLength,S->pBitRevTable);    
Arm_cfft_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    const uint16_t bitRevLen,
Arm_cfft_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    const uint16_t * pBitRevTable);
Arm_cfft_radix2_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t twidCoefModifier);
Arm_cfft_radix2_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t twidCoefModifier,
Arm_cfft_radix2_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    uint16_t fftSize,
Arm_cfft_radix2_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    uint16_t bitRevFactor,
Arm_cfft_radix2_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    uint16_t * pBitRevTab);
Arm_cfft_radix2_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):uint16_t twidCoefModifier)
Arm_cfft_radix2_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):uint16_t twidCoefModifier,
Arm_cfft_radix2_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t fftLen,
Arm_cfft_radix2_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) armBitRevTable;
Arm_cfft_radix2_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[1];
Arm_cfft_radix2_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[3];
Arm_cfft_radix2_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[7];
Arm_cfft_radix2_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[15];
Arm_cfft_radix2_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[31];
Arm_cfft_radix2_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[63];
Arm_cfft_radix2_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[127];
Arm_cfft_radix2_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[255];
Arm_cfft_radix2_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t fftLen,
Arm_cfft_radix2_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) armBitRevTable;
Arm_cfft_radix2_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[1];
Arm_cfft_radix2_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[3];
Arm_cfft_radix2_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[7];
Arm_cfft_radix2_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[15];
Arm_cfft_radix2_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[31];
Arm_cfft_radix2_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[63];
Arm_cfft_radix2_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[127];
Arm_cfft_radix2_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[255];
Arm_cfft_radix2_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t fftLen,
Arm_cfft_radix2_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) armBitRevTable;
Arm_cfft_radix2_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[1];
Arm_cfft_radix2_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[3];
Arm_cfft_radix2_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[7];
Arm_cfft_radix2_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[15];
Arm_cfft_radix2_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[31];
Arm_cfft_radix2_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[63];
Arm_cfft_radix2_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[127];
Arm_cfft_radix2_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[255];
Arm_cfft_radix2_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t twidCoefModifier);
Arm_cfft_radix2_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t twidCoefModifier);
Arm_cfft_radix2_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t bitRevFactor,
Arm_cfft_radix2_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t * pBitRevTab);
Arm_cfft_radix2_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t twidCoefModifier)
Arm_cfft_radix2_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t twidCoefModifier)
Arm_cfft_radix2_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t twidCoefModifier);
Arm_cfft_radix2_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t twidCoefModifier);
Arm_cfft_radix2_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t bitRevFactor,
Arm_cfft_radix2_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t * pBitRevTab);
Arm_cfft_radix2_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):uint16_t twidCoefModifier)
Arm_cfft_radix2_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):uint16_t twidCoefModifier)
Arm_cfft_radix4_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):uint16_t fftSize,
Arm_cfft_radix4_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):uint16_t bitRevFactor,
Arm_cfft_radix4_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):uint16_t * pBitRevTab);
Arm_cfft_radix4_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):uint16_t fftLen,
Arm_cfft_radix4_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):uint16_t twidCoefModifier)
Arm_cfft_radix4_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):uint16_t fftLen,
Arm_cfft_radix4_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):uint16_t twidCoefModifier,
Arm_cfft_radix4_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t fftLen,
Arm_cfft_radix4_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) armBitRevTable;
Arm_cfft_radix4_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[3];
Arm_cfft_radix4_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[15];
Arm_cfft_radix4_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[63];
Arm_cfft_radix4_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[255];
Arm_cfft_radix4_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t fftLen,
Arm_cfft_radix4_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) armBitRevTable;
Arm_cfft_radix4_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[3];
Arm_cfft_radix4_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[15];
Arm_cfft_radix4_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[63];
Arm_cfft_radix4_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[255];
Arm_cfft_radix4_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t fftLen,
Arm_cfft_radix4_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) armBitRevTable;
Arm_cfft_radix4_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[3];
Arm_cfft_radix4_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[15];
Arm_cfft_radix4_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[63];
Arm_cfft_radix4_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->pBitRevTable = (uint16_t *) & armBitRevTable[255];
Arm_cfft_radix4_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t bitRevFactor,
Arm_cfft_radix4_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t * pBitRevTab);
Arm_cfft_radix4_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):uint16_t bitRevFactor,
Arm_cfft_radix4_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):uint16_t * pBitRevTab);
Arm_cfft_radix8_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):uint16_t fftLen,
Arm_cfft_radix8_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):uint16_t twidCoefModifier)
Arm_common_tables.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\commontables):const uint16_t armBitRevTable[1024] = {
Arm_common_tables.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\commontables):const uint16_t armBitRevIndexTable16[ARMBITREVINDEXTABLE__16_TABLE_LENGTH] = 
Arm_common_tables.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\commontables):const uint16_t armBitRevIndexTable32[ARMBITREVINDEXTABLE__32_TABLE_LENGTH] = 
Arm_common_tables.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\commontables):const uint16_t armBitRevIndexTable64[ARMBITREVINDEXTABLE__64_TABLE_LENGTH] = 
Arm_common_tables.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\commontables):const uint16_t armBitRevIndexTable128[ARMBITREVINDEXTABLE_128_TABLE_LENGTH] = 
Arm_common_tables.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\commontables):const uint16_t armBitRevIndexTable256[ARMBITREVINDEXTABLE_256_TABLE_LENGTH] = 
Arm_common_tables.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\commontables):const uint16_t armBitRevIndexTable512[ARMBITREVINDEXTABLE_512_TABLE_LENGTH] = 
Arm_common_tables.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\commontables):const uint16_t armBitRevIndexTable1024[ARMBITREVINDEXTABLE1024_TABLE_LENGTH] = 
Arm_common_tables.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\commontables):const uint16_t armBitRevIndexTable2048[ARMBITREVINDEXTABLE2048_TABLE_LENGTH] = 
Arm_common_tables.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\commontables):const uint16_t armBitRevIndexTable4096[ARMBITREVINDEXTABLE4096_TABLE_LENGTH] = 
Arm_common_tables.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\commontables):const uint16_t armBitRevIndexTable_fixed_16[ARMBITREVINDEXTABLE_FIXED___16_TABLE_LENGTH] = 
Arm_common_tables.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\commontables):const uint16_t armBitRevIndexTable_fixed_32[ARMBITREVINDEXTABLE_FIXED___32_TABLE_LENGTH] = 
Arm_common_tables.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\commontables):const uint16_t armBitRevIndexTable_fixed_64[ARMBITREVINDEXTABLE_FIXED___64_TABLE_LENGTH] = 
Arm_common_tables.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\commontables):const uint16_t armBitRevIndexTable_fixed_128[ARMBITREVINDEXTABLE_FIXED__128_TABLE_LENGTH] = 
Arm_common_tables.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\commontables):const uint16_t armBitRevIndexTable_fixed_256[ARMBITREVINDEXTABLE_FIXED__256_TABLE_LENGTH] = 
Arm_common_tables.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\commontables):const uint16_t armBitRevIndexTable_fixed_512[ARMBITREVINDEXTABLE_FIXED__512_TABLE_LENGTH] = 
Arm_common_tables.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\commontables):const uint16_t armBitRevIndexTable_fixed_1024[ARMBITREVINDEXTABLE_FIXED_1024_TABLE_LENGTH] = 
Arm_common_tables.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\commontables):const uint16_t armBitRevIndexTable_fixed_2048[ARMBITREVINDEXTABLE_FIXED_2048_TABLE_LENGTH] = 
Arm_common_tables.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\commontables):const uint16_t armBitRevIndexTable_fixed_4096[ARMBITREVINDEXTABLE_FIXED_4096_TABLE_LENGTH] = 
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):extern const uint16_t armBitRevTable[1024];
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):#define ARMBITREVINDEXTABLE__16_TABLE_LENGTH ((uint16_t)20  )
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):#define ARMBITREVINDEXTABLE__32_TABLE_LENGTH ((uint16_t)48  )
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):#define ARMBITREVINDEXTABLE__64_TABLE_LENGTH ((uint16_t)56  )
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):#define ARMBITREVINDEXTABLE_128_TABLE_LENGTH ((uint16_t)208 )
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):#define ARMBITREVINDEXTABLE_256_TABLE_LENGTH ((uint16_t)440 )
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):#define ARMBITREVINDEXTABLE_512_TABLE_LENGTH ((uint16_t)448 )
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):#define ARMBITREVINDEXTABLE1024_TABLE_LENGTH ((uint16_t)1800)
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):#define ARMBITREVINDEXTABLE2048_TABLE_LENGTH ((uint16_t)3808)
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):#define ARMBITREVINDEXTABLE4096_TABLE_LENGTH ((uint16_t)4032)
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):extern const uint16_t armBitRevIndexTable16[ARMBITREVINDEXTABLE__16_TABLE_LENGTH];
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):extern const uint16_t armBitRevIndexTable32[ARMBITREVINDEXTABLE__32_TABLE_LENGTH];
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):extern const uint16_t armBitRevIndexTable64[ARMBITREVINDEXTABLE__64_TABLE_LENGTH];
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):extern const uint16_t armBitRevIndexTable128[ARMBITREVINDEXTABLE_128_TABLE_LENGTH];
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):extern const uint16_t armBitRevIndexTable256[ARMBITREVINDEXTABLE_256_TABLE_LENGTH];
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):extern const uint16_t armBitRevIndexTable512[ARMBITREVINDEXTABLE_512_TABLE_LENGTH];
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):extern const uint16_t armBitRevIndexTable1024[ARMBITREVINDEXTABLE1024_TABLE_LENGTH];
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):extern const uint16_t armBitRevIndexTable2048[ARMBITREVINDEXTABLE2048_TABLE_LENGTH];
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):extern const uint16_t armBitRevIndexTable4096[ARMBITREVINDEXTABLE4096_TABLE_LENGTH];
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):#define ARMBITREVINDEXTABLE_FIXED___16_TABLE_LENGTH ((uint16_t)12  )
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):#define ARMBITREVINDEXTABLE_FIXED___32_TABLE_LENGTH ((uint16_t)24  )
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):#define ARMBITREVINDEXTABLE_FIXED___64_TABLE_LENGTH ((uint16_t)56  )
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):#define ARMBITREVINDEXTABLE_FIXED__128_TABLE_LENGTH ((uint16_t)112 )
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):#define ARMBITREVINDEXTABLE_FIXED__256_TABLE_LENGTH ((uint16_t)240 )
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):#define ARMBITREVINDEXTABLE_FIXED__512_TABLE_LENGTH ((uint16_t)480 )
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):#define ARMBITREVINDEXTABLE_FIXED_1024_TABLE_LENGTH ((uint16_t)992 )
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):#define ARMBITREVINDEXTABLE_FIXED_2048_TABLE_LENGTH ((uint16_t)1984)
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):#define ARMBITREVINDEXTABLE_FIXED_4096_TABLE_LENGTH ((uint16_t)4032)
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):extern const uint16_t armBitRevIndexTable_fixed_16[ARMBITREVINDEXTABLE_FIXED___16_TABLE_LENGTH];
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):extern const uint16_t armBitRevIndexTable_fixed_32[ARMBITREVINDEXTABLE_FIXED___32_TABLE_LENGTH];
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):extern const uint16_t armBitRevIndexTable_fixed_64[ARMBITREVINDEXTABLE_FIXED___64_TABLE_LENGTH];
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):extern const uint16_t armBitRevIndexTable_fixed_128[ARMBITREVINDEXTABLE_FIXED__128_TABLE_LENGTH];
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):extern const uint16_t armBitRevIndexTable_fixed_256[ARMBITREVINDEXTABLE_FIXED__256_TABLE_LENGTH];
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):extern const uint16_t armBitRevIndexTable_fixed_512[ARMBITREVINDEXTABLE_FIXED__512_TABLE_LENGTH];
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):extern const uint16_t armBitRevIndexTable_fixed_1024[ARMBITREVINDEXTABLE_FIXED_1024_TABLE_LENGTH];
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):extern const uint16_t armBitRevIndexTable_fixed_2048[ARMBITREVINDEXTABLE_FIXED_2048_TABLE_LENGTH];
Arm_common_tables.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):extern const uint16_t armBitRevIndexTable_fixed_4096[ARMBITREVINDEXTABLE_FIXED_4096_TABLE_LENGTH];
Arm_cos_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\fastmathfunctions):  uint16_t index;                                /* Index variable */
Arm_cos_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\fastmathfunctions):  index = ((uint16_t)findex) & 0x1ff;
Arm_cos_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\fastmathfunctions):  x = (uint16_t)x + 0x2000;
Arm_cos_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\fastmathfunctions):      x = (uint16_t)x + 0x8000;
Arm_dct4_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t N,
Arm_dct4_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t Nby2,
Arm_dct4_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t N,
Arm_dct4_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t Nby2,
Arm_dct4_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t N,
Arm_dct4_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t Nby2,
Arm_dct4_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t i;                                    /* Loop counter */
Arm_fir_decimate_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps,
Arm_fir_decimate_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps,
Arm_fir_decimate_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps,
Arm_fir_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps,
Arm_fir_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps,
Arm_fir_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps,
Arm_fir_init_q7.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps,
Arm_fir_interpolate_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t phaseLen = S->phaseLength, tapCnt;    /* Length of each polyphase filter component */
Arm_fir_interpolate_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t phaseLen = S->phaseLength, tapCnt;    /* Length of each polyphase filter component */
Arm_fir_interpolate_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps,
Arm_fir_interpolate_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps,
Arm_fir_interpolate_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps,
Arm_fir_interpolate_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t phaseLen = S->phaseLength;            /* Length of each polyphase filter component */
Arm_fir_interpolate_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t phaseLen = S->phaseLength;            /* Length of each polyphase filter component */
Arm_fir_interpolate_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t phaseLen = S->phaseLength, tapCnt;    /* Length of each polyphase filter component */
Arm_fir_interpolate_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t phaseLen = S->phaseLength, tapCnt;    /* Length of each polyphase filter component */
Arm_fir_lattice_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numStages,
Arm_fir_lattice_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numStages,
Arm_fir_lattice_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numStages,
Arm_fir_sparse_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter  */
Arm_fir_sparse_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps,
Arm_fir_sparse_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t maxDelay,
Arm_fir_sparse_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps,
Arm_fir_sparse_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t maxDelay,
Arm_fir_sparse_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps,
Arm_fir_sparse_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t maxDelay,
Arm_fir_sparse_init_q7.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps,
Arm_fir_sparse_init_q7.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t maxDelay,
Arm_fir_sparse_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps = S->numTaps;                 /* Filter order */
Arm_fir_sparse_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps = S->numTaps;                 /* Filter order */
Arm_fir_sparse_q7.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps = S->numTaps;                 /* Filter order */
Arm_iir_lattice_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numStages,
Arm_iir_lattice_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numStages,
Arm_iir_lattice_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numStages,
Arm_lms_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps,
Arm_lms_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps,
Arm_lms_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps,
Arm_lms_norm_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps,
Arm_lms_norm_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps,
Arm_lms_norm_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\filteringfunctions):  uint16_t numTaps,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include): *       uint16_t numRows;     // number of rows of the matrix.
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include): *       uint16_t numCols;     // number of columns of the matrix.
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numTaps;        /**< number of filter coefficients in the filter. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numTaps;         /**< number of filter coefficients in the filter. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numTaps;         /**< number of filter coefficients in the filter. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numTaps;     /**< number of filter coefficients in the filter. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numTaps,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numTaps,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numTaps,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numTaps,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numRows;     /**< number of rows of the matrix.     */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numCols;     /**< number of columns of the matrix.  */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numRows;     /**< number of rows of the matrix.     */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numCols;     /**< number of columns of the matrix.  */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numRows;     /**< number of rows of the matrix.     */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numCols;     /**< number of columns of the matrix.  */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numRows;     /**< number of rows of the matrix.     */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numCols;     /**< number of columns of the matrix.  */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t nRows,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t nColumns,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t nRows,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t nColumns,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t nRows,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t nColumns,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numRows;   /**< number of rows in the data table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numCols;   /**< number of columns in the data table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numRows;   /**< number of rows in the data table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numCols;   /**< number of columns in the data table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numRows;   /**< number of rows in the data table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numCols;   /**< number of columns in the data table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numRows;   /**< number of rows in the data table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numCols;   /**< number of columns in the data table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t fftLen;                 /**< length of the FFT. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t *pBitRevTable;          /**< points to the bit reversal table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t twidCoefModifier;       /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t bitRevFactor;           /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t fftLen,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t fftLen;                 /**< length of the FFT. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t *pBitRevTable;          /**< points to the bit reversal table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t twidCoefModifier;       /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t bitRevFactor;           /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t fftLen,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t fftLen;                 /**< length of the FFT. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t *pBitRevTable;          /**< points to the bit reversal table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t twidCoefModifier;       /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t bitRevFactor;           /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t fftLen,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t fftLen;                 /**< length of the FFT. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t *pBitRevTable;          /**< points to the bit reversal table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t twidCoefModifier;       /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t bitRevFactor;           /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t fftLen,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t fftLen;                   /**< length of the FFT. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t *pBitRevTable;            /**< points to the bit reversal table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t twidCoefModifier;         /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t bitRevFactor;             /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t fftLen,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t fftLen;                   /**< length of the FFT. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t *pBitRevTable;            /**< points to the bit reversal table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t twidCoefModifier;         /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t bitRevFactor;             /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t fftLen,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t fftLen;                   /**< length of the FFT. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    const uint16_t *pBitRevTable;      /**< points to the bit reversal table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t bitRevLength;             /**< bit reversal table length. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t fftLen;                   /**< length of the FFT. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    const uint16_t *pBitRevTable;      /**< points to the bit reversal table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t bitRevLength;             /**< bit reversal table length. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t fftLen;                   /**< length of the FFT. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    const uint16_t *pBitRevTable;      /**< points to the bit reversal table. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t bitRevLength;             /**< bit reversal table length. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t fftLenBy2;                         /**< length of the complex FFT. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t fftLenRFFT;             /**< length of the real sequence */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):   uint16_t fftLen);
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t N;                          /**< length of the DCT4. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t Nby2;                       /**< half of the length of the DCT4. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t N,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t Nby2,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t N;                          /**< length of the DCT4. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t Nby2;                       /**< half of the length of the DCT4. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t N,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t Nby2,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t N;                          /**< length of the DCT4. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t Nby2;                       /**< half of the length of the DCT4. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t N,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t Nby2,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numTaps;           /**< number of coefficients in the filter. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numTaps;           /**< number of coefficients in the filter. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numTaps;           /**< number of coefficients in the filter. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numTaps,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numTaps,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numTaps,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t phaseLength;           /**< length of each polyphase filter component. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t phaseLength;           /**< length of each polyphase filter component. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t phaseLength;          /**< length of each polyphase filter component. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numTaps,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numTaps,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numTaps,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numStages;                  /**< number of filter stages. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numStages;                  /**< number of filter stages. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numStages;                  /**< number of filter stages. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numStages,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numStages,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numStages,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numStages;                  /**< number of stages in the filter. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numStages;                  /**< number of stages in the filter. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numStages;                  /**< number of stages in the filter. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numStages,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numStages,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numStages,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numTaps;    /**< number of coefficients in the filter. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numTaps,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numTaps;    /**< number of coefficients in the filter. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numTaps,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numTaps;    /**< number of coefficients in the filter. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numTaps,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numTaps;     /**< number of coefficients in the filter. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numTaps,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numTaps;     /**< number of coefficients in the filter. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numTaps,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numTaps;     /**< Number of coefficients in the filter. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numTaps,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numTaps;             /**< number of coefficients in the filter. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t stateIndex;          /**< state buffer index.  Points to the oldest sample in the state buffer. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t maxDelay;            /**< maximum offset specified by the pTapDelay array. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numTaps;             /**< number of coefficients in the filter. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t stateIndex;          /**< state buffer index.  Points to the oldest sample in the state buffer. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t maxDelay;            /**< maximum offset specified by the pTapDelay array. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numTaps;             /**< number of coefficients in the filter. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t stateIndex;          /**< state buffer index.  Points to the oldest sample in the state buffer. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t maxDelay;            /**< maximum offset specified by the pTapDelay array. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t numTaps;             /**< number of coefficients in the filter. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t stateIndex;          /**< state buffer index.  Points to the oldest sample in the state buffer. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    uint16_t maxDelay;            /**< maximum offset specified by the pTapDelay array. */
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numTaps,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t maxDelay,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numTaps,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t maxDelay,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numTaps,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t maxDelay,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t numTaps,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t maxDelay,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t * writeOffset,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    *writeOffset = (uint16_t)wOffset;
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t * writeOffset,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    *writeOffset = (uint16_t)wOffset;
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  uint16_t * writeOffset,
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    *writeOffset = (uint16_t)wOffset;
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):   *     uint16_t numRows;
Arm_math.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):   *     uint16_t numCols;
Arm_mat_add_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numSamples;                           /* total number of elements in the matrix  */
Arm_mat_add_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):    numSamples = (uint16_t) (pSrcA->numRows * pSrcA->numCols);
Arm_mat_cmplx_mult_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
Arm_mat_cmplx_mult_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
Arm_mat_cmplx_mult_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
Arm_mat_cmplx_mult_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t col, i = 0u, j, row = numRowsA, colCnt;      /* loop counters */
Arm_mat_cmplx_mult_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A    */
Arm_mat_cmplx_mult_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
Arm_mat_cmplx_mult_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
Arm_mat_cmplx_mult_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numRowsB = pSrcB->numRows;            /* number of rows of input matrix A    */
Arm_mat_cmplx_mult_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t col, i = 0u, row = numRowsB, colCnt;  /* loop counters */
Arm_mat_cmplx_mult_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
Arm_mat_cmplx_mult_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
Arm_mat_cmplx_mult_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
Arm_mat_cmplx_mult_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t col, i = 0u, j, row = numRowsA, colCnt;      /* loop counters */
Arm_mat_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t nRows,
Arm_mat_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t nColumns,
Arm_mat_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t nRows,
Arm_mat_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t nColumns,
Arm_mat_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t nRows,
Arm_mat_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t nColumns,
Arm_mat_mult_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
Arm_mat_mult_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
Arm_mat_mult_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
Arm_mat_mult_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t col, i = 0u, j, row = numRowsA, colCnt;      /* loop counters */
Arm_mat_mult_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t col, i = 0u, row = numRowsA, colCnt;  /* loop counters */
Arm_mat_mult_fast_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A    */
Arm_mat_mult_fast_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
Arm_mat_mult_fast_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
Arm_mat_mult_fast_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numRowsB = pSrcB->numRows;            /* number of rows of input matrix A    */
Arm_mat_mult_fast_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t col, i = 0u, row = numRowsB, colCnt;  /* loop counters */
Arm_mat_mult_fast_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A    */
Arm_mat_mult_fast_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
Arm_mat_mult_fast_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
Arm_mat_mult_fast_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t col, i = 0u, j, row = numRowsA, colCnt;      /* loop counters */
Arm_mat_mult_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A    */
Arm_mat_mult_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
Arm_mat_mult_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
Arm_mat_mult_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numRowsB = pSrcB->numRows;            /* number of rows of input matrix A    */
Arm_mat_mult_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t col, i = 0u, row = numRowsB, colCnt;  /* loop counters */
Arm_mat_mult_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
Arm_mat_mult_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
Arm_mat_mult_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A    */
Arm_mat_mult_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t col, i = 0u, row = numRowsA, colCnt;  /* loop counters */
Arm_mat_mult_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A    */
Arm_mat_mult_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
Arm_mat_mult_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
Arm_mat_mult_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t col, i = 0u, j, row = numRowsA, colCnt;      /* loop counters */
Arm_mat_mult_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t col, i = 0u, row = numRowsA, colCnt;  /* loop counters */
Arm_mat_trans_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t nRows = pSrc->numRows;                /* number of rows */
Arm_mat_trans_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t nColumns = pSrc->numCols;             /* number of columns */
Arm_mat_trans_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t blkCnt, i = 0u, row = nRows;          /* loop counters */
Arm_mat_trans_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t col, i = 0u, row = nRows;             /* loop counters */
Arm_mat_trans_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t nRows = pSrc->numRows;                /* number of nRows */
Arm_mat_trans_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t nColumns = pSrc->numCols;             /* number of nColumns */
Arm_mat_trans_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t col, row = nRows, i = 0u;             /* row and column loop counters */
Arm_mat_trans_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t nRows = pSrc->numRows;                /* number of nRows */
Arm_mat_trans_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t nColumns = pSrc->numCols;             /* number of nColumns  */
Arm_mat_trans_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t blkCnt, i = 0u, row = nRows;          /* loop counters */
Arm_mat_trans_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\matrixfunctions):  uint16_t col, i = 0u, row = nRows;             /* loop counters */
Arm_rfft_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    uint16_t fftLen,
Arm_rfft_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    uint16_t twidCoefModifier);
Arm_rfft_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    uint16_t fftLen,
Arm_rfft_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    uint16_t twidCoefModifier,
Arm_rfft_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    uint16_t fftSize,
Arm_rfft_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    uint16_t bitRevFactor,
Arm_rfft_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    uint16_t * pBitRevTab);
Arm_rfft_fast_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  uint16_t fftLen)
Arm_rfft_fast_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
Arm_rfft_fast_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
Arm_rfft_fast_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
Arm_rfft_fast_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
Arm_rfft_fast_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
Arm_rfft_fast_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
Arm_rfft_fast_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
Arm_rfft_fast_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
Arm_rfft_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  S->fftLenReal = (uint16_t) fftLenReal;
Arm_rfft_init_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):  S->fftLenBy2 = (uint16_t) fftLenReal / 2u;
Arm_rfft_init_q15.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->fftLenReal = (uint16_t) fftLenReal;
Arm_rfft_init_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\transformfunctions):    S->fftLenReal = (uint16_t) fftLenReal;
Arm_sin_cos_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\controllerfunctions):  uint16_t indexS, indexC;                         /* Index variable */
Arm_sin_cos_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\controllerfunctions):  indexS = ((uint16_t)findex) & 0x1ff;
Arm_sin_cos_q31.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\controllerfunctions):  uint16_t indexS, indexC;                     /* Index variable */
Arm_sin_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\fastmathfunctions):  uint16_t index;                                        /* Index variable */
Arm_sin_f32.c (e:\tcl\project\sensor\software\sensor\drivers\cmsis\dsp_lib\source\fastmathfunctions):  index = ((uint16_t)findex) & 0x1ff;
Cmsis_armcc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  \return        value of type uint16_t at (*ptr)
Cmsis_armcc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  #define __LDREXH(ptr)                                                        ((uint16_t) __ldrex(ptr))
Cmsis_armcc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  #define __LDREXH(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint16_t) __ldrex(ptr))  _Pragma("pop")
Cmsis_armcc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  \return        value of type uint16_t at (*ptr)
Cmsis_armcc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):#define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
cmsis_armcc_V6.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  \return        value of type uint16_t at (*ptr)
cmsis_armcc_V6.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):#define __LDREXH        (uint16_t)__builtin_arm_ldrex
cmsis_armcc_V6.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  \return        value of type uint16_t at (*ptr)
cmsis_armcc_V6.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):__attribute__((always_inline)) __STATIC_INLINE uint16_t __LDRHT(volatile uint16_t *ptr)
cmsis_armcc_V6.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):   return ((uint16_t) result);    /* Add explicit type cast here */
cmsis_armcc_V6.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):__attribute__((always_inline)) __STATIC_INLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
cmsis_armcc_V6.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  \return        value of type uint16_t at (*ptr)
cmsis_armcc_V6.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):__attribute__((always_inline)) __STATIC_INLINE uint16_t __LDAH(volatile uint16_t *ptr)
cmsis_armcc_V6.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):   return ((uint16_t) result);
cmsis_armcc_V6.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):__attribute__((always_inline)) __STATIC_INLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
cmsis_armcc_V6.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  \return        value of type uint16_t at (*ptr)
cmsis_armcc_V6.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):#define     __LDAEXH                 (uint16_t)__builtin_arm_ldaex
Cmsis_gcc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  \return        value of type uint16_t at (*ptr)
Cmsis_gcc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):__attribute__((always_inline)) __STATIC_INLINE uint16_t __LDREXH(volatile uint16_t *addr)
Cmsis_gcc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):   return ((uint16_t) result);    /* Add explicit type cast here */
Cmsis_gcc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):__attribute__((always_inline)) __STATIC_INLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
Cmsis_gcc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):  \return        value of type uint16_t at (*ptr)
Cmsis_gcc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):__attribute__((always_inline)) __STATIC_INLINE uint16_t __LDRHT(volatile uint16_t *addr)
Cmsis_gcc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):   return ((uint16_t) result);    /* Add explicit type cast here */
Cmsis_gcc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):__attribute__((always_inline)) __STATIC_INLINE void __STRHT(uint16_t value, volatile uint16_t *addr)
Core_cm3.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
Core_cm4.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
Core_cm7.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
Core_sc300.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\include):    __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
Lcddriver.c (e:\tcl\project\sensor\software\code\lcddriver):const uint16_t CapLetterMap[26]=
Lcddriver.c (e:\tcl\project\sensor\software\code\lcddriver):const uint16_t NumberMap[10]=
Lcddriver.c (e:\tcl\project\sensor\software\code\lcddriver):  uint16_t ch = 0 ;
Lcddriver.h (e:\tcl\project\sensor\software\code\inc):void LCD_GLASS_DisplayStrDeci(uint16_t* ptr);
Lcddriver.h (e:\tcl\project\sensor\software\code\inc):void LCD_GLASS_ScrollSentence(uint8_t* ptr, uint16_t nScroll, uint16_t ScrollSpeed);
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  uint16_t      RESERVED1;    /*!< Reserved,                                    Address offset: 0x06 */ 
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED0;       /*!< Reserved */     
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED1;       /*!< Reserved */       
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED2;       /*!< Reserved */       
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED3;       /*!< Reserved */       
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED4;       /*!< Reserved */       
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED5;       /*!< Reserved */       
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED6;       /*!< Reserved */       
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED8;       /*!< Reserved */       
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED9;       /*!< Reserved */       
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDA;       /*!< Reserved */       
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDB;       /*!< Reserved */       
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDC;       /*!< Reserved */       
Stm32l100xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000U)            /*!<COM DMA request enable */
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  uint16_t      RESERVED1;    /*!< Reserved,                                    Address offset: 0x06 */ 
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED0;       /*!< Reserved */     
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED1;       /*!< Reserved */       
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED2;       /*!< Reserved */       
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED3;       /*!< Reserved */       
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED4;       /*!< Reserved */       
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED5;       /*!< Reserved */       
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED6;       /*!< Reserved */       
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED8;       /*!< Reserved */       
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED9;       /*!< Reserved */       
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDA;       /*!< Reserved */       
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDB;       /*!< Reserved */       
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDC;       /*!< Reserved */       
Stm32l100xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000U)            /*!<COM DMA request enable */
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  uint16_t      RESERVED1;    /*!< Reserved,                                    Address offset: 0x06 */ 
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED0;       /*!< Reserved */     
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED1;       /*!< Reserved */       
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED2;       /*!< Reserved */       
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED3;       /*!< Reserved */       
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED4;       /*!< Reserved */       
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED5;       /*!< Reserved */       
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED6;       /*!< Reserved */       
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED8;       /*!< Reserved */       
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED9;       /*!< Reserved */       
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDA;       /*!< Reserved */       
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDB;       /*!< Reserved */       
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDC;       /*!< Reserved */       
Stm32l100xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000U)            /*!<COM DMA request enable */
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  uint16_t      RESERVED1;    /*!< Reserved,                                    Address offset: 0x06 */ 
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED0;       /*!< Reserved */     
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED1;       /*!< Reserved */       
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED2;       /*!< Reserved */       
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED3;       /*!< Reserved */       
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED4;       /*!< Reserved */       
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED5;       /*!< Reserved */       
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED6;       /*!< Reserved */       
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED8;       /*!< Reserved */       
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED9;       /*!< Reserved */       
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDA;       /*!< Reserved */       
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDB;       /*!< Reserved */       
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDC;       /*!< Reserved */       
Stm32l151xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000U)            /*!<COM DMA request enable */
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  uint16_t      RESERVED1;    /*!< Reserved,                                    Address offset: 0x06 */ 
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED0;       /*!< Reserved */     
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED1;       /*!< Reserved */       
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED2;       /*!< Reserved */       
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED3;       /*!< Reserved */       
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED4;       /*!< Reserved */       
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED5;       /*!< Reserved */       
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED6;       /*!< Reserved */       
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED8;       /*!< Reserved */       
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED9;       /*!< Reserved */       
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDA;       /*!< Reserved */       
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDB;       /*!< Reserved */       
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDC;       /*!< Reserved */       
Stm32l151xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000U)            /*!<COM DMA request enable */
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  uint16_t      RESERVED1;    /*!< Reserved,                                    Address offset: 0x06 */ 
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED0;       /*!< Reserved */     
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED1;       /*!< Reserved */       
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED2;       /*!< Reserved */       
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED3;       /*!< Reserved */       
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED4;       /*!< Reserved */       
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED5;       /*!< Reserved */       
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED6;       /*!< Reserved */       
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED8;       /*!< Reserved */       
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED9;       /*!< Reserved */       
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDA;       /*!< Reserved */       
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDB;       /*!< Reserved */       
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDC;       /*!< Reserved */       
Stm32l151xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000U)            /*!<COM DMA request enable */
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  uint16_t      RESERVED1;    /*!< Reserved,                                    Address offset: 0x06 */ 
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED0;       /*!< Reserved */     
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED1;       /*!< Reserved */       
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED2;       /*!< Reserved */       
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED3;       /*!< Reserved */       
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED4;       /*!< Reserved */       
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED5;       /*!< Reserved */       
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED6;       /*!< Reserved */       
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED8;       /*!< Reserved */       
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED9;       /*!< Reserved */       
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDA;       /*!< Reserved */       
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDB;       /*!< Reserved */       
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDC;       /*!< Reserved */       
Stm32l151xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000U)            /*!<COM DMA request enable */
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  uint16_t      RESERVED1;    /*!< Reserved,                                    Address offset: 0x06 */ 
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED0;       /*!< Reserved */     
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED1;       /*!< Reserved */       
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED2;       /*!< Reserved */       
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED3;       /*!< Reserved */       
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED4;       /*!< Reserved */       
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED5;       /*!< Reserved */       
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED6;       /*!< Reserved */       
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED8;       /*!< Reserved */       
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED9;       /*!< Reserved */       
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDA;       /*!< Reserved */       
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDB;       /*!< Reserved */       
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDC;       /*!< Reserved */       
Stm32l151xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000U)            /*!<COM DMA request enable */
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  uint16_t      RESERVED1;    /*!< Reserved,                                    Address offset: 0x06 */ 
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED0;       /*!< Reserved */     
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED1;       /*!< Reserved */       
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED2;       /*!< Reserved */       
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED3;       /*!< Reserved */       
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED4;       /*!< Reserved */       
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED5;       /*!< Reserved */       
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED6;       /*!< Reserved */       
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED8;       /*!< Reserved */       
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED9;       /*!< Reserved */       
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDA;       /*!< Reserved */       
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDB;       /*!< Reserved */       
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDC;       /*!< Reserved */       
Stm32l151xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000U)            /*!<COM DMA request enable */
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  uint16_t      RESERVED1;    /*!< Reserved,                                    Address offset: 0x06 */ 
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED0;       /*!< Reserved */     
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED1;       /*!< Reserved */       
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED2;       /*!< Reserved */       
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED3;       /*!< Reserved */       
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED4;       /*!< Reserved */       
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED5;       /*!< Reserved */       
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED6;       /*!< Reserved */       
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED8;       /*!< Reserved */       
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED9;       /*!< Reserved */       
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDA;       /*!< Reserved */       
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDB;       /*!< Reserved */       
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDC;       /*!< Reserved */       
Stm32l151xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000U)            /*!<COM DMA request enable */
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  uint16_t      RESERVED1;    /*!< Reserved,                                    Address offset: 0x06 */ 
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED0;       /*!< Reserved */     
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED1;       /*!< Reserved */       
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED2;       /*!< Reserved */       
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED3;       /*!< Reserved */       
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED4;       /*!< Reserved */       
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED5;       /*!< Reserved */       
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED6;       /*!< Reserved */       
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED8;       /*!< Reserved */       
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED9;       /*!< Reserved */       
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDA;       /*!< Reserved */       
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDB;       /*!< Reserved */       
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDC;       /*!< Reserved */       
Stm32l152xb.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000U)            /*!<COM DMA request enable */
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  uint16_t      RESERVED1;    /*!< Reserved,                                    Address offset: 0x06 */ 
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED0;       /*!< Reserved */     
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED1;       /*!< Reserved */       
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED2;       /*!< Reserved */       
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED3;       /*!< Reserved */       
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED4;       /*!< Reserved */       
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED5;       /*!< Reserved */       
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED6;       /*!< Reserved */       
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED8;       /*!< Reserved */       
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED9;       /*!< Reserved */       
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDA;       /*!< Reserved */       
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDB;       /*!< Reserved */       
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDC;       /*!< Reserved */       
Stm32l152xba.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000U)            /*!<COM DMA request enable */
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  uint16_t      RESERVED1;    /*!< Reserved,                                    Address offset: 0x06 */ 
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED0;       /*!< Reserved */     
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED1;       /*!< Reserved */       
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED2;       /*!< Reserved */       
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED3;       /*!< Reserved */       
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED4;       /*!< Reserved */       
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED5;       /*!< Reserved */       
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED6;       /*!< Reserved */       
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED8;       /*!< Reserved */       
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED9;       /*!< Reserved */       
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDA;       /*!< Reserved */       
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDB;       /*!< Reserved */       
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDC;       /*!< Reserved */       
Stm32l152xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000U)            /*!<COM DMA request enable */
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  uint16_t      RESERVED1;    /*!< Reserved,                                    Address offset: 0x06 */ 
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED0;       /*!< Reserved */     
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED1;       /*!< Reserved */       
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED2;       /*!< Reserved */       
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED3;       /*!< Reserved */       
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED4;       /*!< Reserved */       
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED5;       /*!< Reserved */       
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED6;       /*!< Reserved */       
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED8;       /*!< Reserved */       
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED9;       /*!< Reserved */       
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDA;       /*!< Reserved */       
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDB;       /*!< Reserved */       
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDC;       /*!< Reserved */       
Stm32l152xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000U)            /*!<COM DMA request enable */
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  uint16_t      RESERVED1;    /*!< Reserved,                                    Address offset: 0x06 */ 
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED0;       /*!< Reserved */     
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED1;       /*!< Reserved */       
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED2;       /*!< Reserved */       
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED3;       /*!< Reserved */       
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED4;       /*!< Reserved */       
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED5;       /*!< Reserved */       
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED6;       /*!< Reserved */       
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED8;       /*!< Reserved */       
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED9;       /*!< Reserved */       
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDA;       /*!< Reserved */       
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDB;       /*!< Reserved */       
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDC;       /*!< Reserved */       
Stm32l152xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000U)            /*!<COM DMA request enable */
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  uint16_t      RESERVED1;    /*!< Reserved,                                    Address offset: 0x06 */ 
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED0;       /*!< Reserved */     
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED1;       /*!< Reserved */       
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED2;       /*!< Reserved */       
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED3;       /*!< Reserved */       
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED4;       /*!< Reserved */       
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED5;       /*!< Reserved */       
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED6;       /*!< Reserved */       
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED8;       /*!< Reserved */       
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED9;       /*!< Reserved */       
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDA;       /*!< Reserved */       
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDB;       /*!< Reserved */       
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDC;       /*!< Reserved */       
Stm32l152xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000U)            /*!<COM DMA request enable */
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  uint16_t      RESERVED1;    /*!< Reserved,                                    Address offset: 0x06 */ 
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED0;       /*!< Reserved */     
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED1;       /*!< Reserved */       
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED2;       /*!< Reserved */       
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED3;       /*!< Reserved */       
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED4;       /*!< Reserved */       
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED5;       /*!< Reserved */       
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED6;       /*!< Reserved */       
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED8;       /*!< Reserved */       
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED9;       /*!< Reserved */       
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDA;       /*!< Reserved */       
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDB;       /*!< Reserved */       
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDC;       /*!< Reserved */       
Stm32l152xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000U)            /*!<COM DMA request enable */
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  uint16_t      RESERVED1;    /*!< Reserved,                                    Address offset: 0x06 */ 
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED0;       /*!< Reserved */     
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED1;       /*!< Reserved */       
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED2;       /*!< Reserved */       
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED3;       /*!< Reserved */       
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED4;       /*!< Reserved */       
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED5;       /*!< Reserved */       
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED6;       /*!< Reserved */       
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED8;       /*!< Reserved */       
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED9;       /*!< Reserved */       
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDA;       /*!< Reserved */       
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDB;       /*!< Reserved */       
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDC;       /*!< Reserved */       
Stm32l162xc.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000U)            /*!<COM DMA request enable */
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  uint16_t      RESERVED1;    /*!< Reserved,                                    Address offset: 0x06 */ 
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED0;       /*!< Reserved */     
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED1;       /*!< Reserved */       
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED2;       /*!< Reserved */       
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED3;       /*!< Reserved */       
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED4;       /*!< Reserved */       
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED5;       /*!< Reserved */       
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED6;       /*!< Reserved */       
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED8;       /*!< Reserved */       
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED9;       /*!< Reserved */       
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDA;       /*!< Reserved */       
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDB;       /*!< Reserved */       
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDC;       /*!< Reserved */       
Stm32l162xca.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000U)            /*!<COM DMA request enable */
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  uint16_t      RESERVED1;    /*!< Reserved,                                    Address offset: 0x06 */ 
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED0;       /*!< Reserved */     
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED1;       /*!< Reserved */       
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED2;       /*!< Reserved */       
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED3;       /*!< Reserved */       
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED4;       /*!< Reserved */       
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED5;       /*!< Reserved */       
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED6;       /*!< Reserved */       
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED8;       /*!< Reserved */       
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED9;       /*!< Reserved */       
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDA;       /*!< Reserved */       
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDB;       /*!< Reserved */       
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDC;       /*!< Reserved */       
Stm32l162xd.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000U)            /*!<COM DMA request enable */
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  uint16_t      RESERVED1;    /*!< Reserved,                                    Address offset: 0x06 */ 
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED0;       /*!< Reserved */     
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED1;       /*!< Reserved */       
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED2;       /*!< Reserved */       
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED3;       /*!< Reserved */       
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED4;       /*!< Reserved */       
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED5;       /*!< Reserved */       
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED6;       /*!< Reserved */       
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED8;       /*!< Reserved */       
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED9;       /*!< Reserved */       
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDA;       /*!< Reserved */       
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDB;       /*!< Reserved */       
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDC;       /*!< Reserved */       
Stm32l162xdx.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000U)            /*!<COM DMA request enable */
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  uint16_t      RESERVED1;    /*!< Reserved,                                    Address offset: 0x06 */ 
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP0R;            /*!< USB Endpoint 0 register,                Address offset: 0x00 */ 
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED0;       /*!< Reserved */     
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP1R;            /*!< USB Endpoint 1 register,                Address offset: 0x04 */
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED1;       /*!< Reserved */       
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP2R;            /*!< USB Endpoint 2 register,                Address offset: 0x08 */
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED2;       /*!< Reserved */       
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP3R;            /*!< USB Endpoint 3 register,                Address offset: 0x0C */ 
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED3;       /*!< Reserved */       
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP4R;            /*!< USB Endpoint 4 register,                Address offset: 0x10 */
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED4;       /*!< Reserved */       
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP5R;            /*!< USB Endpoint 5 register,                Address offset: 0x14 */
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED5;       /*!< Reserved */       
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP6R;            /*!< USB Endpoint 6 register,                Address offset: 0x18 */
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED6;       /*!< Reserved */       
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t EP7R;            /*!< USB Endpoint 7 register,                Address offset: 0x1C */
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED7[17];   /*!< Reserved */     
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t CNTR;            /*!< Control register,                       Address offset: 0x40 */
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED8;       /*!< Reserved */       
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t ISTR;            /*!< Interrupt status register,              Address offset: 0x44 */
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVED9;       /*!< Reserved */       
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t FNR;             /*!< Frame number register,                  Address offset: 0x48 */
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDA;       /*!< Reserved */       
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t DADDR;           /*!< Device address register,                Address offset: 0x4C */
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDB;       /*!< Reserved */       
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t BTABLE;          /*!< Buffer Table address register,          Address offset: 0x50 */
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):  __IO uint16_t RESERVEDC;       /*!< Reserved */       
Stm32l162xe.h (e:\tcl\project\sensor\software\sensor\drivers\cmsis\device\st\stm32l1xx\include):#define  TIM_DIER_COMDE                      ((uint16_t)0x2000U)            /*!<COM DMA request enable */
Stm32l1xx_hal.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define RI_PIN_0                 ((uint16_t)0x0001)  /*!< Pin 0 selected */
Stm32l1xx_hal.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define RI_PIN_1                 ((uint16_t)0x0002)  /*!< Pin 1 selected */
Stm32l1xx_hal.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define RI_PIN_2                 ((uint16_t)0x0004)  /*!< Pin 2 selected */
Stm32l1xx_hal.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define RI_PIN_3                 ((uint16_t)0x0008)  /*!< Pin 3 selected */
Stm32l1xx_hal.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define RI_PIN_4                 ((uint16_t)0x0010)  /*!< Pin 4 selected */
Stm32l1xx_hal.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define RI_PIN_5                 ((uint16_t)0x0020)  /*!< Pin 5 selected */
Stm32l1xx_hal.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define RI_PIN_6                 ((uint16_t)0x0040)  /*!< Pin 6 selected */
Stm32l1xx_hal.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define RI_PIN_7                 ((uint16_t)0x0080)  /*!< Pin 7 selected */
Stm32l1xx_hal.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define RI_PIN_8                 ((uint16_t)0x0100)  /*!< Pin 8 selected */
Stm32l1xx_hal.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define RI_PIN_9                 ((uint16_t)0x0200)  /*!< Pin 9 selected */
Stm32l1xx_hal.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define RI_PIN_10                ((uint16_t)0x0400)  /*!< Pin 10 selected */
Stm32l1xx_hal.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define RI_PIN_11                ((uint16_t)0x0800)  /*!< Pin 11 selected */
Stm32l1xx_hal.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define RI_PIN_12                ((uint16_t)0x1000)  /*!< Pin 12 selected */
Stm32l1xx_hal.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define RI_PIN_13                ((uint16_t)0x2000)  /*!< Pin 13 selected */
Stm32l1xx_hal.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define RI_PIN_14                ((uint16_t)0x4000)  /*!< Pin 14 selected */
Stm32l1xx_hal.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define RI_PIN_15                ((uint16_t)0x8000)  /*!< Pin 15 selected */
Stm32l1xx_hal.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define RI_PIN_ALL               ((uint16_t)0xFFFF)  /*!< All pins selected */
Stm32l1xx_hal.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define IS_RI_PIN(__PIN__) ((__PIN__) != (uint16_t)0x00)
Stm32l1xx_hal_cortex.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define IS_MPU_SUB_REGION_DISABLE(SUBREGION)  ((SUBREGION) < (uint16_t)0x00FF)
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static HAL_StatusTypeDef  CRYP_ProcessData(CRYP_HandleTypeDef *hcryp, uint8_t* Input, uint16_t Ilength, uint8_t* Output, uint32_t Timeout);
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static void               CRYP_SetDMAConfig(CRYP_HandleTypeDef *hcryp, uint32_t inputaddr, uint16_t Size, uint32_t outputaddr);
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_CRYP_AESECB_Encrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16_t Size, uint8_t *pCypherData, uint32_t Timeout)
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  if((((uint32_t)pPlainData & (uint32_t)0x00000003) != 0) || (((uint32_t)pCypherData & (uint32_t)0x00000003) != 0) || ((Size & (uint16_t)0x000F) != 0))
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_CRYP_AESCBC_Encrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16_t Size, uint8_t *pCypherData, uint32_t Timeout)
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  if((((uint32_t)pPlainData & (uint32_t)0x00000003) != 0) || (((uint32_t)pCypherData & (uint32_t)0x00000003) != 0) || ((Size & (uint16_t)0x000F) != 0))
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_CRYP_AESCTR_Encrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16_t Size, uint8_t *pCypherData, uint32_t Timeout)
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  if((((uint32_t)pPlainData & (uint32_t)0x00000003) != 0) || (((uint32_t)pCypherData & (uint32_t)0x00000003) != 0) || ((Size & (uint16_t)0x000F) != 0))
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_CRYP_AESECB_Decrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint16_t Size, uint8_t *pPlainData, uint32_t Timeout)
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  if((((uint32_t)pPlainData & (uint32_t)0x00000003) != 0) || (((uint32_t)pCypherData & (uint32_t)0x00000003) != 0) || ((Size & (uint16_t)0x000F) != 0))
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_CRYP_AESCBC_Decrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint16_t Size, uint8_t *pPlainData, uint32_t Timeout)
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  if((((uint32_t)pPlainData & (uint32_t)0x00000003) != 0) || (((uint32_t)pCypherData & (uint32_t)0x00000003) != 0) || ((Size & (uint16_t)0x000F) != 0))
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_CRYP_AESCTR_Decrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint16_t Size, uint8_t *pPlainData, uint32_t Timeout)
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  if((((uint32_t)pPlainData & (uint32_t)0x00000003) != 0) || (((uint32_t)pCypherData & (uint32_t)0x00000003) != 0) || ((Size & (uint16_t)0x000F) != 0))
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_CRYP_AESECB_Encrypt_IT(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16_t Size, uint8_t *pCypherData)
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  if((((uint32_t)pPlainData & (uint32_t)0x00000003) != 0) || (((uint32_t)pCypherData & (uint32_t)0x00000003) != 0) || ((Size & (uint16_t)0x000F) != 0))
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_CRYP_AESCBC_Encrypt_IT(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16_t Size, uint8_t *pCypherData)
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  if((((uint32_t)pPlainData & (uint32_t)0x00000003) != 0) || (((uint32_t)pCypherData & (uint32_t)0x00000003) != 0) || ((Size & (uint16_t)0x000F) != 0))
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_CRYP_AESCTR_Encrypt_IT(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16_t Size, uint8_t *pCypherData)
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  if((((uint32_t)pPlainData & (uint32_t)0x00000003) != 0) || (((uint32_t)pCypherData & (uint32_t)0x00000003) != 0) || ((Size & (uint16_t)0x000F) != 0))
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_CRYP_AESECB_Decrypt_IT(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint16_t Size, uint8_t *pPlainData)
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  if((((uint32_t)pPlainData & (uint32_t)0x00000003) != 0) || (((uint32_t)pCypherData & (uint32_t)0x00000003) != 0) || ((Size & (uint16_t)0x000F) != 0))
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_CRYP_AESCBC_Decrypt_IT(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint16_t Size, uint8_t *pPlainData)
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  if((((uint32_t)pPlainData & (uint32_t)0x00000003) != 0) || (((uint32_t)pCypherData & (uint32_t)0x00000003) != 0) || ((Size & (uint16_t)0x000F) != 0))
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_CRYP_AESCTR_Decrypt_IT(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint16_t Size, uint8_t *pPlainData)
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  if((((uint32_t)pPlainData & (uint32_t)0x00000003) != 0) || (((uint32_t)pCypherData & (uint32_t)0x00000003) != 0) || ((Size & (uint16_t)0x000F) != 0))
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_CRYP_AESECB_Encrypt_DMA(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16_t Size, uint8_t *pCypherData)
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  if((((uint32_t)pPlainData & (uint32_t)0x00000003) != 0) || (((uint32_t)pCypherData & (uint32_t)0x00000003) != 0) || ((Size & (uint16_t)0x000F) != 0))
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_CRYP_AESCBC_Encrypt_DMA(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16_t Size, uint8_t *pCypherData)
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  if((((uint32_t)pPlainData & (uint32_t)0x00000003) != 0) || (((uint32_t)pCypherData & (uint32_t)0x00000003) != 0) || ((Size & (uint16_t)0x000F) != 0))
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_CRYP_AESCTR_Encrypt_DMA(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16_t Size, uint8_t *pCypherData)
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  if((((uint32_t)pPlainData & (uint32_t)0x00000003) != 0) || (((uint32_t)pCypherData & (uint32_t)0x00000003) != 0) || ((Size & (uint16_t)0x000F) != 0))
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_CRYP_AESECB_Decrypt_DMA(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint16_t Size, uint8_t *pPlainData)
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  if((((uint32_t)pPlainData & (uint32_t)0x00000003) != 0) || (((uint32_t)pCypherData & (uint32_t)0x00000003) != 0) || ((Size & (uint16_t)0x000F) != 0))
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_CRYP_AESCBC_Decrypt_DMA(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint16_t Size, uint8_t *pPlainData)
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  if((((uint32_t)pPlainData & (uint32_t)0x00000003) != 0) || (((uint32_t)pCypherData & (uint32_t)0x00000003) != 0) || ((Size & (uint16_t)0x000F) != 0))
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_CRYP_AESCTR_Decrypt_DMA(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint16_t Size, uint8_t *pPlainData)
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  if((((uint32_t)pPlainData & (uint32_t)0x00000003) != 0) || (((uint32_t)pCypherData & (uint32_t)0x00000003) != 0) || ((Size & (uint16_t)0x000F) != 0))
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static HAL_StatusTypeDef CRYP_ProcessData(CRYP_HandleTypeDef *hcryp, uint8_t* Input, uint16_t Ilength, uint8_t* Output, uint32_t Timeout)
Stm32l1xx_hal_cryp.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static void CRYP_SetDMAConfig(CRYP_HandleTypeDef *hcryp, uint32_t inputaddr, uint16_t Size, uint32_t outputaddr)
Stm32l1xx_hal_cryp.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  __IO uint16_t               CrypInCount;      /*!< Counter of inputed data */
Stm32l1xx_hal_cryp.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  __IO uint16_t               CrypOutCount;     /*!< Counter of outputed data */
Stm32l1xx_hal_cryp.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef     HAL_CRYP_AESECB_Encrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16_t Size, uint8_t *pCypherData, uint32_t Timeout);
Stm32l1xx_hal_cryp.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef     HAL_CRYP_AESECB_Decrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint16_t Size, uint8_t *pPlainData, uint32_t Timeout);
Stm32l1xx_hal_cryp.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef     HAL_CRYP_AESCBC_Encrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16_t Size, uint8_t *pCypherData, uint32_t Timeout);
Stm32l1xx_hal_cryp.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef     HAL_CRYP_AESCBC_Decrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint16_t Size, uint8_t *pPlainData, uint32_t Timeout);
Stm32l1xx_hal_cryp.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef     HAL_CRYP_AESCTR_Encrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16_t Size, uint8_t *pCypherData, uint32_t Timeout);
Stm32l1xx_hal_cryp.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef     HAL_CRYP_AESCTR_Decrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint16_t Size, uint8_t *pPlainData, uint32_t Timeout);
Stm32l1xx_hal_cryp.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef     HAL_CRYP_AESECB_Encrypt_IT(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16_t Size, uint8_t *pCypherData);
Stm32l1xx_hal_cryp.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef     HAL_CRYP_AESCBC_Encrypt_IT(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16_t Size, uint8_t *pCypherData);
Stm32l1xx_hal_cryp.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef     HAL_CRYP_AESCTR_Encrypt_IT(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16_t Size, uint8_t *pCypherData);
Stm32l1xx_hal_cryp.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef     HAL_CRYP_AESECB_Decrypt_IT(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint16_t Size, uint8_t *pPlainData);
Stm32l1xx_hal_cryp.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef     HAL_CRYP_AESCTR_Decrypt_IT(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint16_t Size, uint8_t *pPlainData);
Stm32l1xx_hal_cryp.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef     HAL_CRYP_AESCBC_Decrypt_IT(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint16_t Size, uint8_t *pPlainData);
Stm32l1xx_hal_cryp.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef     HAL_CRYP_AESECB_Encrypt_DMA(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16_t Size, uint8_t *pCypherData);
Stm32l1xx_hal_cryp.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef     HAL_CRYP_AESECB_Decrypt_DMA(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint16_t Size, uint8_t *pPlainData);
Stm32l1xx_hal_cryp.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef     HAL_CRYP_AESCBC_Encrypt_DMA(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16_t Size, uint8_t *pCypherData);
Stm32l1xx_hal_cryp.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef     HAL_CRYP_AESCBC_Decrypt_DMA(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint16_t Size, uint8_t *pPlainData);
Stm32l1xx_hal_cryp.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef     HAL_CRYP_AESCTR_Encrypt_DMA(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16_t Size, uint8_t *pCypherData);
Stm32l1xx_hal_cryp.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef     HAL_CRYP_AESCTR_Decrypt_DMA(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint16_t Size, uint8_t *pPlainData);
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static HAL_StatusTypeDef  FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data);
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static HAL_StatusTypeDef  FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data);
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t tmp1 = 0;
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t optiontmp2 = 0;
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  optiontmp2 = (uint16_t)(OB_PCROP_SELECTED | optiontmp); 
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  tmp1 = (uint16_t)(~(optiontmp2 ));
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t tmp1 = 0;
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t optiontmp2 = 0;
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  optiontmp2 = (uint16_t)(OB_PCROP_DESELECTED | optiontmp); 
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  tmp1 = (uint16_t)(~(optiontmp2 ));
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):      *(__IO uint16_t *) Address = (uint16_t)0x0000;
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    wrp01data = (uint16_t)(((WRP1OrPCROP1 & WRP_MASK_LOW) | OB->WRP01));
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    wrp23data = (uint16_t)((((WRP1OrPCROP1 & WRP_MASK_HIGH)>>16 | OB->WRP23))); 
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    wrp01data = (uint16_t)(~WRP1OrPCROP1 & (WRP_MASK_LOW & OB->WRP01));
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    wrp23data = (uint16_t)((((~WRP1OrPCROP1 & WRP_MASK_HIGH)>>16 & OB->WRP23))); 
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    wrp45data = (uint16_t)(((WRP2OrPCROP2 & WRP_MASK_LOW) | OB->WRP45));
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    wrp67data = (uint16_t)((((WRP2OrPCROP2 & WRP_MASK_HIGH)>>16 | OB->WRP67))); 
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    wrp45data = (uint16_t)(~WRP2OrPCROP2 & (WRP_MASK_LOW & OB->WRP45));
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    wrp67data = (uint16_t)((((~WRP2OrPCROP2 & WRP_MASK_HIGH)>>16 & OB->WRP67))); 
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    wrp89data = (uint16_t)(((WRP3 & WRP_MASK_LOW) | OB->WRP89));
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    wrp1011data = (uint16_t)((((WRP3 & WRP_MASK_HIGH)>>16 | OB->WRP1011))); 
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    wrp89data = (uint16_t)(~WRP3 & (WRP_MASK_LOW & OB->WRP89));
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    wrp1011data = (uint16_t)((((~WRP3 & WRP_MASK_HIGH)>>16 & OB->WRP1011))); 
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    wrp1213data = (uint16_t)(((WRP4 & WRP_MASK_LOW) | OB->WRP1213));
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    wrp1415data = (uint16_t)((((WRP4 & WRP_MASK_HIGH)>>16 | OB->WRP1415))); 
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    wrp1213data = (uint16_t)(~WRP4 & (WRP_MASK_LOW & OB->WRP1213));
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    wrp1415data = (uint16_t)((((~WRP4 & WRP_MASK_HIGH)>>16 & OB->WRP1415))); 
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data)
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    if(Data != (uint16_t)0x0000) 
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):      *(__IO uint16_t *)Address = Data;
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    *(__IO uint16_t *)Address = Data;
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data)
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    if(Data != (uint16_t)0x0000)
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):      *(__IO uint16_t *)Address = Data;
Stm32l1xx_hal_flash_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    *(__IO uint16_t *)Address = Data;
Stm32l1xx_hal_flash_ex.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t BootConfig;          /*!< BootConfig: specifies Option bytes for boot config
Stm32l1xx_hal_flash_ex.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define OB_PCROP_DESELECTED     ((uint16_t)0x0000)            /*!< Disabled PCROP, nWPRi bits used for Write Protection on sector i */
Stm32l1xx_hal_flash_ex.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define OB_PCROP_SELECTED       ((uint16_t)FLASH_OBR_SPRMOD)  /*!< Enable PCROP, nWPRi bits used for PCRoP Protection on sector i   */
Stm32l1xx_hal_gpio.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
Stm32l1xx_hal_gpio.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
Stm32l1xx_hal_gpio.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
Stm32l1xx_hal_gpio.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
Stm32l1xx_hal_gpio.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
Stm32l1xx_hal_gpio.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define GPIO_PIN_0                 ((uint16_t)0x0001)  /* Pin 0 selected    */
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define GPIO_PIN_1                 ((uint16_t)0x0002)  /* Pin 1 selected    */
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define GPIO_PIN_2                 ((uint16_t)0x0004)  /* Pin 2 selected    */
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define GPIO_PIN_3                 ((uint16_t)0x0008)  /* Pin 3 selected    */
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define GPIO_PIN_4                 ((uint16_t)0x0010)  /* Pin 4 selected    */
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define GPIO_PIN_5                 ((uint16_t)0x0020)  /* Pin 5 selected    */
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define GPIO_PIN_6                 ((uint16_t)0x0040)  /* Pin 6 selected    */
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define GPIO_PIN_7                 ((uint16_t)0x0080)  /* Pin 7 selected    */
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define GPIO_PIN_8                 ((uint16_t)0x0100)  /* Pin 8 selected    */
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define GPIO_PIN_9                 ((uint16_t)0x0200)  /* Pin 9 selected    */
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define GPIO_PIN_10                ((uint16_t)0x0400)  /* Pin 10 selected   */
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define GPIO_PIN_11                ((uint16_t)0x0800)  /* Pin 11 selected   */
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define GPIO_PIN_12                ((uint16_t)0x1000)  /* Pin 12 selected   */
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define GPIO_PIN_13                ((uint16_t)0x2000)  /* Pin 13 selected   */
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define GPIO_PIN_14                ((uint16_t)0x4000)  /* Pin 14 selected   */
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define GPIO_PIN_15                ((uint16_t)0x8000)  /* Pin 15 selected   */
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define GPIO_PIN_All               ((uint16_t)0xFFFF)  /* All pins selected */
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):GPIO_PinState     HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):void              HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState);
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):void              HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):void              HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin);
Stm32l1xx_hal_gpio.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):void              HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout);
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout);
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout);
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout);
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
Stm32l1xx_hal_i2c.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t                   XferSize;   /*!< I2C transfer size              */
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  __IO uint16_t              XferCount;  /*!< I2C transfer counter           */
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout);
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout);
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout);
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout);
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout);
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define I2C_MEM_ADD_MSB(__ADDRESS__)                       ((uint8_t)((uint16_t)(((uint16_t)((__ADDRESS__) & (uint16_t)(0xFF00))) >> 8)))
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define I2C_MEM_ADD_LSB(__ADDRESS__)                       ((uint8_t)((uint16_t)((__ADDRESS__) & (uint16_t)(0x00FF))))
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define I2C_10BIT_ADDRESS(__ADDRESS__)                     ((uint8_t)((uint16_t)((__ADDRESS__) & (uint16_t)(0x00FF))))
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define I2C_10BIT_HEADER_WRITE(__ADDRESS__)                ((uint8_t)((uint16_t)((uint16_t)(((uint16_t)((__ADDRESS__) & (uint16_t)(0x0300))) >> 7) | (uint16_t)(0xF0))))
Stm32l1xx_hal_i2c.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define I2C_10BIT_HEADER_READ(__ADDRESS__)                 ((uint8_t)((uint16_t)((uint16_t)(((uint16_t)((__ADDRESS__) & (uint16_t)(0x0300))) >> 7) | (uint16_t)(0xF1))))
Stm32l1xx_hal_i2s.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
Stm32l1xx_hal_i2s.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
Stm32l1xx_hal_i2s.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2S_Transmit_IT(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
Stm32l1xx_hal_i2s.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2S_Receive_IT(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
Stm32l1xx_hal_i2s.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
Stm32l1xx_hal_i2s.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
Stm32l1xx_hal_i2s.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t                   *pTxBuffPtr;  /* Pointer to I2S Tx transfer buffer */
Stm32l1xx_hal_i2s.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  __IO uint16_t              TxXferSize;   /* I2S Tx transfer size              */
Stm32l1xx_hal_i2s.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  __IO uint16_t              TxXferCount;  /* I2S Tx transfer Counter           */
Stm32l1xx_hal_i2s.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t                   *pRxBuffPtr;  /* Pointer to I2S Rx transfer buffer */
Stm32l1xx_hal_i2s.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  __IO uint16_t              RxXferSize;   /* I2S Rx transfer size              */
Stm32l1xx_hal_i2s.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  __IO uint16_t              RxXferCount;  /* I2S Rx transfer counter 
Stm32l1xx_hal_i2s.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout);
Stm32l1xx_hal_i2s.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout);
Stm32l1xx_hal_i2s.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2S_Transmit_IT(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size);
Stm32l1xx_hal_i2s.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2S_Receive_IT(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size);
Stm32l1xx_hal_i2s.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size);
Stm32l1xx_hal_i2s.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size);
Stm32l1xx_hal_irda.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):#define IRDA_DR_MASK_U16_8DATABITS  (uint16_t)0x00FF
Stm32l1xx_hal_irda.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):#define IRDA_DR_MASK_U16_9DATABITS  (uint16_t)0x01FF
Stm32l1xx_hal_irda.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_IRDA_Transmit(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size, uint32_t Timeout)
Stm32l1xx_hal_irda.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t* tmp = 0;
Stm32l1xx_hal_irda.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        tmp = (uint16_t*) pData;
Stm32l1xx_hal_irda.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_IRDA_Receive(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size, uint32_t Timeout)
Stm32l1xx_hal_irda.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t* tmp = 0;
Stm32l1xx_hal_irda.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        tmp = (uint16_t*) pData ;
Stm32l1xx_hal_irda.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):          *tmp = (uint16_t)(hirda->Instance->DR & IRDA_DR_MASK_U16_9DATABITS);
Stm32l1xx_hal_irda.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):          *tmp = (uint16_t)(hirda->Instance->DR & IRDA_DR_MASK_U16_8DATABITS);
Stm32l1xx_hal_irda.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_irda.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_IRDA_Receive_IT(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_irda.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_IRDA_Transmit_DMA(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_irda.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_IRDA_Receive_DMA(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_irda.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t* tmp = 0;
Stm32l1xx_hal_irda.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):      tmp = (uint16_t*) hirda->pTxBuffPtr;
Stm32l1xx_hal_irda.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):      WRITE_REG(hirda->Instance->DR, (uint16_t)(*tmp & IRDA_DR_MASK_U16_9DATABITS));
Stm32l1xx_hal_irda.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t* tmp = 0;
Stm32l1xx_hal_irda.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):      tmp = (uint16_t*) hirda->pRxBuffPtr;
Stm32l1xx_hal_irda.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        *tmp = (uint16_t)(hirda->Instance->DR & IRDA_DR_MASK_U16_9DATABITS);
Stm32l1xx_hal_irda.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        *tmp = (uint16_t)(hirda->Instance->DR & IRDA_DR_MASK_U16_8DATABITS);
Stm32l1xx_hal_irda.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t                    TxXferSize;       /*!< IRDA Tx Transfer size              */
Stm32l1xx_hal_irda.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t                    TxXferCount;      /*!< IRDA Tx Transfer Counter           */
Stm32l1xx_hal_irda.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t                    RxXferSize;       /*!< IRDA Rx Transfer size              */
Stm32l1xx_hal_irda.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t                    RxXferCount;      /*!< IRDA Rx Transfer Counter           */  
Stm32l1xx_hal_irda.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_IRDA_Transmit(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size, uint32_t Timeout);
Stm32l1xx_hal_irda.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_IRDA_Receive(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size, uint32_t Timeout);
Stm32l1xx_hal_irda.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_irda.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_IRDA_Receive_IT(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_irda.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_IRDA_Transmit_DMA(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_irda.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_IRDA_Receive_DMA(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):#define NOR_CMD_ADDRESS_FIRST                 (uint16_t)0x0555
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):#define NOR_CMD_ADDRESS_FIRST_CFI             (uint16_t)0x0055
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):#define NOR_CMD_ADDRESS_SECOND                (uint16_t)0x02AA
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):#define NOR_CMD_ADDRESS_THIRD                 (uint16_t)0x0555
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):#define NOR_CMD_ADDRESS_FOURTH                (uint16_t)0x0555
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):#define NOR_CMD_ADDRESS_FIFTH                 (uint16_t)0x02AA
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):#define NOR_CMD_ADDRESS_SIXTH                 (uint16_t)0x0555
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):#define NOR_CMD_DATA_READ_RESET               (uint16_t)0x00F0
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):#define NOR_CMD_DATA_FIRST                    (uint16_t)0x00AA
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):#define NOR_CMD_DATA_SECOND                   (uint16_t)0x0055
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):#define NOR_CMD_DATA_AUTO_SELECT              (uint16_t)0x0090
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):#define NOR_CMD_DATA_PROGRAM                  (uint16_t)0x00A0
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):#define NOR_CMD_DATA_CHIP_BLOCK_ERASE_THIRD   (uint16_t)0x0080
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):#define NOR_CMD_DATA_CHIP_BLOCK_ERASE_FOURTH  (uint16_t)0x00AA
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):#define NOR_CMD_DATA_CHIP_BLOCK_ERASE_FIFTH   (uint16_t)0x0055
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):#define NOR_CMD_DATA_CHIP_ERASE               (uint16_t)0x0010
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):#define NOR_CMD_DATA_CFI                      (uint16_t)0x0098
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):#define NOR_MASK_STATUS_DQ5                   (uint16_t)0x0020
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):#define NOR_MASK_STATUS_DQ6                   (uint16_t)0x0040
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  pNOR_ID->Manufacturer_Code = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, MC_ADDRESS);
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  pNOR_ID->Device_Code1      = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, DEVICE_CODE1_ADDR);
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  pNOR_ID->Device_Code2      = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, DEVICE_CODE2_ADDR);
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  pNOR_ID->Device_Code3      = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, DEVICE_CODE3_ADDR);
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_NOR_Read(NOR_HandleTypeDef *hnor, uint32_t *pAddress, uint16_t *pData)
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_NOR_Program(NOR_HandleTypeDef *hnor, uint32_t *pAddress, uint16_t *pData)
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_NOR_ReadBuffer(NOR_HandleTypeDef *hnor, uint32_t uwAddress, uint16_t *pData, uint32_t uwBufferSize)
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    *pData++ = *(__IO uint16_t *)uwAddress;
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_NOR_ProgramBuffer(NOR_HandleTypeDef *hnor, uint32_t uwAddress, uint16_t *pData, uint32_t uwBufferSize)
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t * p_currentaddress = (uint16_t *)NULL;
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t * p_endaddress = (uint16_t *)NULL;
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  p_currentaddress  = (uint16_t*)((uint32_t)(uwAddress));
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  pNOR_CFI->CFI_1 = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, CFI1_ADDRESS);
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  pNOR_CFI->CFI_2 = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, CFI2_ADDRESS);
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  pNOR_CFI->CFI_3 = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, CFI3_ADDRESS);
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  pNOR_CFI->CFI_4 = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, CFI4_ADDRESS);
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t tmp_sr1 = 0, tmp_sr2 = 0;
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    tmp_sr1 = *(__IO uint16_t *)Address;
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    tmp_sr2 = *(__IO uint16_t *)Address;
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    tmp_sr1 = *(__IO uint16_t *)Address;
Stm32l1xx_hal_nor.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    tmp_sr2 = *(__IO uint16_t *)Address;
Stm32l1xx_hal_nor.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define MC_ADDRESS               ((uint16_t)0x0000)
Stm32l1xx_hal_nor.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define DEVICE_CODE1_ADDR        ((uint16_t)0x0001)
Stm32l1xx_hal_nor.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define DEVICE_CODE2_ADDR        ((uint16_t)0x000E)
Stm32l1xx_hal_nor.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define DEVICE_CODE3_ADDR        ((uint16_t)0x000F)
Stm32l1xx_hal_nor.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define CFI1_ADDRESS             ((uint16_t)0x10)
Stm32l1xx_hal_nor.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define CFI2_ADDRESS             ((uint16_t)0x11)
Stm32l1xx_hal_nor.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define CFI3_ADDRESS             ((uint16_t)0x12)
Stm32l1xx_hal_nor.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define CFI4_ADDRESS             ((uint16_t)0x13)
Stm32l1xx_hal_nor.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define NOR_TMEOUT               ((uint16_t)0xFFFF)
Stm32l1xx_hal_nor.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define NOR_WRITE(__ADDRESS__, __DATA__)  (*(__IO uint16_t *)((uint32_t)(__ADDRESS__)) = (__DATA__))
Stm32l1xx_hal_nor.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t Manufacturer_Code;  /*!< Defines the device's manufacturer code used to identify the memory       */
Stm32l1xx_hal_nor.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t Device_Code1;
Stm32l1xx_hal_nor.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t Device_Code2;
Stm32l1xx_hal_nor.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t Device_Code3;       /*!< Defines the device's codes used to identify the memory. 
Stm32l1xx_hal_nor.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t CFI_1;
Stm32l1xx_hal_nor.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t CFI_2;
Stm32l1xx_hal_nor.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t CFI_3;
Stm32l1xx_hal_nor.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t CFI_4;
Stm32l1xx_hal_nor.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_NOR_Read(NOR_HandleTypeDef *hnor, uint32_t *pAddress, uint16_t *pData);
Stm32l1xx_hal_nor.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_NOR_Program(NOR_HandleTypeDef *hnor, uint32_t *pAddress, uint16_t *pData);
Stm32l1xx_hal_nor.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_NOR_ReadBuffer(NOR_HandleTypeDef *hnor, uint32_t uwAddress, uint16_t *pData, uint32_t uwBufferSize);
Stm32l1xx_hal_nor.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_NOR_ProgramBuffer(NOR_HandleTypeDef *hnor, uint32_t uwAddress, uint16_t *pData, uint32_t uwBufferSize);
Stm32l1xx_hal_pcd.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes);
Stm32l1xx_hal_pcd.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes);
Stm32l1xx_hal_pcd.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t count=0;
Stm32l1xx_hal_pcd.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  __IO uint16_t wIstr;  
Stm32l1xx_hal_pcd.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  __IO uint16_t wEPVal = 0;
Stm32l1xx_hal_pcd.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
Stm32l1xx_hal_pcd.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t *pdwVal;
Stm32l1xx_hal_pcd.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
Stm32l1xx_hal_pcd.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    temp1 = (uint16_t) * pbUsrBuf;
Stm32l1xx_hal_pcd.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
Stm32l1xx_hal_pcd.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
Stm32l1xx_hal_pcd.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
Stm32l1xx_hal_pcd.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
Stm32l1xx_hal_pcd.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
Stm32l1xx_hal_pcd.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t pmabuffer = 0;
Stm32l1xx_hal_pcd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t  pmaadress;      /*!< PMA Address
Stm32l1xx_hal_pcd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t  pmaaddr0;       /*!< PMA Address0
Stm32l1xx_hal_pcd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t  pmaaddr1;        /*!< PMA Address1
Stm32l1xx_hal_pcd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define PCD_SET_ENDPOINT(USBx, bEpNum,wRegValue)  (*(&(USBx)->EP0R + (bEpNum) * 2)= (uint16_t)(wRegValue))
Stm32l1xx_hal_pcd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  if ((uint16_t)(*PCD_EP_RX_CNT((USBx), (bEpNum)) & 0xFC00) != 0)\
Stm32l1xx_hal_pcd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  else if (((uint16_t)(*PCD_EP_TX_CNT((USBx), (bEpNum))) & 0x03FF) != 0)\
Stm32l1xx_hal_pcd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define PCD_SET_EP_TX_STATUS(USBx, bEpNum, wState) { register uint16_t _wRegVal;\
Stm32l1xx_hal_pcd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):    register uint16_t _wRegVal;   \
Stm32l1xx_hal_pcd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define PCD_GET_EP_TX_STATUS(USBx, bEpNum) ((uint16_t)PCD_GET_ENDPOINT((USBx), (bEpNum)) & USB_EPTX_STAT)
Stm32l1xx_hal_pcd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define PCD_GET_EP_RX_STATUS(USBx, bEpNum) ((uint16_t)PCD_GET_ENDPOINT((USBx), (bEpNum)) & USB_EPRX_STAT)
Stm32l1xx_hal_pcd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define PCD_GET_EP_TX_ADDRESS(USBx, bEpNum) ((uint16_t)*PCD_EP_TX_ADDRESS((USBx), (bEpNum)))
Stm32l1xx_hal_pcd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define PCD_GET_EP_RX_ADDRESS(USBx, bEpNum) ((uint16_t)*PCD_EP_RX_ADDRESS((USBx), (bEpNum)))
Stm32l1xx_hal_pcd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):    *pdwReg = (uint16_t)((uint16_t)((wNBlocks) << 10) | 0x8000); \
Stm32l1xx_hal_pcd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):    *pdwReg = (uint16_t)((wNBlocks) << 10);\
Stm32l1xx_hal_pcd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):    uint16_t wNBlocks;\
Stm32l1xx_hal_pcd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define PCD_GET_EP_TX_CNT(USBx, bEpNum)((uint16_t)(*PCD_EP_TX_CNT((USBx), (bEpNum))) & 0x3ff)
Stm32l1xx_hal_pcd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define PCD_GET_EP_RX_CNT(USBx, bEpNum)((uint16_t)(*PCD_EP_RX_CNT((USBx), (bEpNum))) & 0x3ff)
Stm32l1xx_hal_pcd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type);
Stm32l1xx_hal_pcd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):uint16_t          HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr);
Stm32l1xx_hal_pcd_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):                        uint16_t ep_addr,
Stm32l1xx_hal_pcd_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):                        uint16_t ep_kind,
Stm32l1xx_hal_pcd_ex.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    ep->pmaadress = (uint16_t)pmaadress;
Stm32l1xx_hal_pcd_ex.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):                                     uint16_t ep_addr,
Stm32l1xx_hal_pcd_ex.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):                                     uint16_t ep_kind,
Stm32l1xx_hal_sd.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static HAL_SD_ErrorTypedef SD_CmdResp6Error(SD_HandleTypeDef *hsd, uint8_t SD_CMD, uint16_t *pRCA);
Stm32l1xx_hal_sd.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
Stm32l1xx_hal_sd.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4);
Stm32l1xx_hal_sd.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
Stm32l1xx_hal_sd.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t sd_rca = 1;
Stm32l1xx_hal_sd.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static HAL_SD_ErrorTypedef SD_CmdResp6Error(SD_HandleTypeDef *hsd, uint8_t SD_CMD, uint16_t *pRCA)
Stm32l1xx_hal_sd.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    *pRCA = (uint16_t) (response_r1 >> 16);
Stm32l1xx_hal_sd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  __IO uint16_t CardComdClasses;      /*!< Card command classes                  */
Stm32l1xx_hal_sd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  __IO uint16_t OEM_AppliID;     /*!< OEM/Application ID    */
Stm32l1xx_hal_sd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  __IO uint16_t ManufactDate;    /*!< Manufacturing Date    */
Stm32l1xx_hal_sd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  __IO uint16_t SD_CARD_TYPE;            /*!< Carries information about card type                        */
Stm32l1xx_hal_sd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  __IO uint16_t ERASE_SIZE;              /*!< Determines the number of AUs to be erased in one operation */
Stm32l1xx_hal_sd.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t            RCA;            /*!< SD relative card address               */
Stm32l1xx_hal_smartcard.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_SMARTCARD_Transmit(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size, uint32_t Timeout)
Stm32l1xx_hal_smartcard.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_SMARTCARD_Receive(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size, uint32_t Timeout)
Stm32l1xx_hal_smartcard.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_SMARTCARD_Transmit_IT(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_smartcard.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_SMARTCARD_Receive_IT(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_smartcard.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_SMARTCARD_Transmit_DMA(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_smartcard.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_SMARTCARD_Receive_DMA(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_smartcard.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t                         TxXferSize;       /*!< SmartCard Tx Transfer size */
Stm32l1xx_hal_smartcard.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t                         TxXferCount;      /*!< SmartCard Tx Transfer Counter */
Stm32l1xx_hal_smartcard.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t                         RxXferSize;       /*!< SmartCard Rx Transfer size */
Stm32l1xx_hal_smartcard.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t                         RxXferCount;      /*!< SmartCard Rx Transfer Counter */
Stm32l1xx_hal_smartcard.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_SMARTCARD_Transmit(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size, uint32_t Timeout);
Stm32l1xx_hal_smartcard.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_SMARTCARD_Receive(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size, uint32_t Timeout);
Stm32l1xx_hal_smartcard.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_SMARTCARD_Transmit_IT(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_smartcard.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_SMARTCARD_Receive_IT(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_smartcard.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_SMARTCARD_Transmit_DMA(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_smartcard.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_SMARTCARD_Receive_DMA(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  __IO uint16_t tmpreg = 0;
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):      *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  __IO uint16_t tmpreg = 0;
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  __IO uint16_t tmpreg = 0;
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  __IO uint16_t tmpreg = 0;
Stm32l1xx_hal_spi.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  __IO uint16_t tmpreg = 0;
Stm32l1xx_hal_spi.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t                   TxXferSize;   /* SPI Tx transfer size */
Stm32l1xx_hal_spi.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t                   TxXferCount;  /* SPI Tx Transfer Counter */
Stm32l1xx_hal_spi.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t                   RxXferSize;   /* SPI Rx transfer size */
Stm32l1xx_hal_spi.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t                   RxXferCount;  /* SPI Rx Transfer Counter */
Stm32l1xx_hal_spi.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout);
Stm32l1xx_hal_spi.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout);
Stm32l1xx_hal_spi.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout);
Stm32l1xx_hal_spi.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_spi.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_spi.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size);
Stm32l1xx_hal_spi.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_spi.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_spi.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size);
Stm32l1xx_hal_sram.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_SRAM_Read_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pDstBuffer, uint32_t BufferSize)
Stm32l1xx_hal_sram.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  __IO uint16_t * psramaddress = (uint16_t *)pAddress;
Stm32l1xx_hal_sram.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    *pDstBuffer = *(__IO uint16_t *)psramaddress;
Stm32l1xx_hal_sram.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_SRAM_Write_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pSrcBuffer, uint32_t BufferSize)
Stm32l1xx_hal_sram.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  __IO uint16_t * psramaddress = (uint16_t *)pAddress; 
Stm32l1xx_hal_sram.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    *(__IO uint16_t *)psramaddress = *pSrcBuffer; 
Stm32l1xx_hal_sram.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_SRAM_Read_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pDstBuffer, uint32_t BufferSize);
Stm32l1xx_hal_sram.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_SRAM_Write_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pSrcBuffer, uint32_t BufferSize);
Stm32l1xx_hal_tim.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static void TIM_ITRx_SetConfig(TIM_TypeDef* TIMx, uint16_t InputTriggerSource);
Stm32l1xx_hal_tim.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
Stm32l1xx_hal_tim.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
Stm32l1xx_hal_tim.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
Stm32l1xx_hal_tim.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
Stm32l1xx_hal_tim.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1, uint32_t *pData2, uint16_t Length)
Stm32l1xx_hal_tim.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
Stm32l1xx_hal_tim.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define TIM_DMA_ID_UPDATE                ((uint16_t) 0x0)       /*!< Index of the DMA handle used for Update DMA requests */
Stm32l1xx_hal_tim.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define TIM_DMA_ID_CC1                   ((uint16_t) 0x1)       /*!< Index of the DMA handle used for Capture/Compare 1 DMA requests */
Stm32l1xx_hal_tim.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define TIM_DMA_ID_CC2                   ((uint16_t) 0x2)       /*!< Index of the DMA handle used for Capture/Compare 2 DMA requests */
Stm32l1xx_hal_tim.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define TIM_DMA_ID_CC3                   ((uint16_t) 0x3)       /*!< Index of the DMA handle used for Capture/Compare 3 DMA requests */
Stm32l1xx_hal_tim.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define TIM_DMA_ID_CC4                   ((uint16_t) 0x4)       /*!< Index of the DMA handle used for Capture/Compare 4 DMA requests */
Stm32l1xx_hal_tim.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define TIM_DMA_ID_TRIGGER               ((uint16_t) 0x6)       /*!< Index of the DMA handle used for Trigger DMA requests */
Stm32l1xx_hal_tim.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):(((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP)) :\
Stm32l1xx_hal_tim.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc): ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP)) :\
Stm32l1xx_hal_tim.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc): ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP)) :\
Stm32l1xx_hal_tim.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc): ((__HANDLE__)->Instance->CCER &= (uint16_t)~TIM_CCER_CC4P))
Stm32l1xx_hal_tim.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):                              (__HANDLE__)->Instance->CR1 &= (uint16_t)(~TIM_CR1_CKD);  \
Stm32l1xx_hal_tim.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length);
Stm32l1xx_hal_tim.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);
Stm32l1xx_hal_tim.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);
Stm32l1xx_hal_tim.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);
Stm32l1xx_hal_tim.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1, uint32_t *pData2, uint16_t Length);
Stm32l1xx_hal_uart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
Stm32l1xx_hal_uart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t* tmp;
Stm32l1xx_hal_uart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        tmp = (uint16_t*) pData;
Stm32l1xx_hal_uart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
Stm32l1xx_hal_uart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
Stm32l1xx_hal_uart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t* tmp;
Stm32l1xx_hal_uart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        tmp = (uint16_t*) pData ;
Stm32l1xx_hal_uart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
Stm32l1xx_hal_uart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
Stm32l1xx_hal_uart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_uart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_uart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_uart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
Stm32l1xx_hal_uart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t* tmp;
Stm32l1xx_hal_uart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):      tmp = (uint16_t*) huart->pTxBuffPtr;
Stm32l1xx_hal_uart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
Stm32l1xx_hal_uart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t* tmp;
Stm32l1xx_hal_uart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):      tmp = (uint16_t*) huart->pRxBuffPtr;
Stm32l1xx_hal_uart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
Stm32l1xx_hal_uart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
Stm32l1xx_hal_uart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t                      TxXferSize;       /*!< UART Tx Transfer size              */
Stm32l1xx_hal_uart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t                      TxXferCount;      /*!< UART Tx Transfer Counter           */
Stm32l1xx_hal_uart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t                      RxXferSize;       /*!< UART Rx Transfer size              */
Stm32l1xx_hal_uart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t                      RxXferCount;      /*!< UART Rx Transfer Counter           */  
Stm32l1xx_hal_uart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):#define __HAL_UART_ONE_BIT_SAMPLE_DISABLE(__HANDLE__) ((__HANDLE__)->Instance->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT))
Stm32l1xx_hal_uart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout);
Stm32l1xx_hal_uart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout);
Stm32l1xx_hal_uart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_uart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_uart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_uart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t* tmp=0;
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        tmp = (uint16_t*) pTxData;
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        WRITE_REG(husart->Instance->DR, (*tmp & (uint16_t)0x01FF));
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t* tmp=0;
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        WRITE_REG(husart->Instance->DR, (DUMMY_DATA & (uint16_t)0x01FF));
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        tmp = (uint16_t*) pRxData ;
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):          *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):          *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x00FF);
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        WRITE_REG(husart->Instance->DR, (DUMMY_DATA & (uint16_t)0x00FF));
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_USART_TransmitReceive(USART_HandleTypeDef *husart, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t* tmp=0;
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        tmp = (uint16_t*) pTxData;
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        WRITE_REG(husart->Instance->DR, (*tmp & (uint16_t)0x01FF));
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        tmp = (uint16_t*) pRxData ;
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):          *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):          *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x00FF);
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_USART_Transmit_IT(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size)
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_USART_Receive_IT(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size)
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):    WRITE_REG(husart->Instance->DR, (DUMMY_DATA & (uint16_t)0x01FF));    
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_USART_TransmitReceive_IT(USART_HandleTypeDef *husart, uint8_t *pTxData, uint8_t *pRxData,  uint16_t Size)
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size)
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_USART_Receive_DMA(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size)
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):HAL_StatusTypeDef HAL_USART_TransmitReceive_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t* tmp=0;
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):      tmp = (uint16_t*) husart->pTxBuffPtr;
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):      WRITE_REG(husart->Instance->DR, (uint16_t)(*tmp & (uint16_t)0x01FF));
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t* tmp=0;
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):      tmp = (uint16_t*) husart->pRxBuffPtr;
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x00FF);
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        WRITE_REG(husart->Instance->DR, (DUMMY_DATA & (uint16_t)0x01FF)); 
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):        WRITE_REG(husart->Instance->DR, (DUMMY_DATA & (uint16_t)0x00FF));  
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):  uint16_t* tmp=0;
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):          tmp = (uint16_t*) husart->pTxBuffPtr;
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):          WRITE_REG(husart->Instance->DR, (uint16_t)(*tmp & (uint16_t)0x01FF));
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):          tmp = (uint16_t*) husart->pRxBuffPtr;
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):            *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
Stm32l1xx_hal_usart.c (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\src):            *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x00FF);
Stm32l1xx_hal_usart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t                       TxXferSize;      /*!< Usart Tx Transfer size              */
Stm32l1xx_hal_usart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  __IO uint16_t                  TxXferCount;     /*!< Usart Tx Transfer Counter           */
Stm32l1xx_hal_usart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  uint16_t                       RxXferSize;      /*!< Usart Rx Transfer size              */
Stm32l1xx_hal_usart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):  __IO uint16_t                  RxXferCount;     /*!< Usart Rx Transfer Counter           */  
Stm32l1xx_hal_usart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout);
Stm32l1xx_hal_usart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size, uint32_t Timeout);
Stm32l1xx_hal_usart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_USART_TransmitReceive(USART_HandleTypeDef *husart, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout);
Stm32l1xx_hal_usart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_USART_Transmit_IT(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size);
Stm32l1xx_hal_usart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_USART_Receive_IT(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size);
Stm32l1xx_hal_usart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_USART_TransmitReceive_IT(USART_HandleTypeDef *husart, uint8_t *pTxData, uint8_t *pRxData,  uint16_t Size);
Stm32l1xx_hal_usart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size);
Stm32l1xx_hal_usart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_USART_Receive_DMA(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size);
Stm32l1xx_hal_usart.h (e:\tcl\project\sensor\software\sensor\drivers\stm32l1xx_hal_driver\inc):HAL_StatusTypeDef HAL_USART_TransmitReceive_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size);
